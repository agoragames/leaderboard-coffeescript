// Generated by CoffeeScript 1.8.0
(function() {
  var CompetitionRankingLeaderboard, Leaderboard,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Leaderboard = require('./leaderboard');

  CompetitionRankingLeaderboard = (function(_super) {
    __extends(CompetitionRankingLeaderboard, _super);

    function CompetitionRankingLeaderboard() {
      return CompetitionRankingLeaderboard.__super__.constructor.apply(this, arguments);
    }


    /*
     * Retrieve the rank for a member in the named leaderboard.
     *
     * @param leaderboardName [String] Name of the leaderboard.
     * @param member [String] Member name.
     * @param callback Callback for result of call.
     *
     * @return the rank for a member in the leaderboard.
     */

    CompetitionRankingLeaderboard.prototype.rankForIn = function(leaderboardName, member, callback) {
      return this.redisConnection.zscore(leaderboardName, member, (function(_this) {
        return function(err, score) {
          if (_this.reverse) {
            return _this.redisConnection.zcount(leaderboardName, '-inf', "(" + score, function(err, memberScore) {
              return callback(memberScore + 1);
            });
          } else {
            return _this.redisConnection.zcount(leaderboardName, "(" + score, '+inf', function(err, memberScore) {
              return callback(memberScore + 1);
            });
          }
        };
      })(this));
    };


    /*
     * Retrieve the score and rank for a member in the named leaderboard.
     *
     * @param leaderboardName [String]Name of the leaderboard.
     * @param member [String] Member name.
     * @param callback Callback for result of call.
     *
     * @return the score and rank for a member in the named leaderboard as a Hash.
     */

    CompetitionRankingLeaderboard.prototype.scoreAndRankForIn = function(leaderboardName, member, callback) {
      return this.redisConnection.zscore(leaderboardName, member, (function(_this) {
        return function(err, memberScore) {
          var transaction;
          transaction = _this.redisConnection.multi();
          transaction.zscore(leaderboardName, member);
          if (_this.reverse) {
            transaction.zrank(leaderboardName, memberScore);
          } else {
            transaction.zrevrank(leaderboardName, memberScore);
          }
          return transaction.exec(function(err, replies) {
            var scoreAndRankData;
            if (replies) {
              scoreAndRankData = {};
              if (replies[0] != null) {
                scoreAndRankData[_this.scoreKeyOption] = parseFloat(replies[0]);
              } else {
                scoreAndRankData[_this.scoreKeyOption] = null;
              }
              if (replies[0] != null) {
                if (_this.reverse) {
                  return _this.redisConnection.zcount(leaderboardName, '-inf', "(" + replies[0], function(err, count) {
                    scoreAndRankData[_this.rankKeyOption] = count + 1;
                    scoreAndRankData[_this.memberKeyOption] = member;
                    return callback(scoreAndRankData);
                  });
                } else {
                  return _this.redisConnection.zcount(leaderboardName, "(" + replies[0], '+inf', function(err, count) {
                    scoreAndRankData[_this.rankKeyOption] = count + 1;
                    scoreAndRankData[_this.memberKeyOption] = member;
                    return callback(scoreAndRankData);
                  });
                }
              } else {
                scoreAndRankData[_this.rankKeyOption] = null;
                scoreAndRankData[_this.memberKeyOption] = member;
                return callback(scoreAndRankData);
              }
            }
          });
        };
      })(this));
    };


    /*
     * Retrieve a page of leaders from the named leaderboard for a given list of members.
     *
     * @param leaderboardName [String] Name of the leaderboard.
     * @param members [Array] Member names.
     * @param options [Hash] Options to be used when retrieving the page from the named leaderboard.
     * @param callback Callback for result of call.
     *
     * @return a page of leaders from the named leaderboard for a given list of members.
     */

    CompetitionRankingLeaderboard.prototype.rankedInListIn = function(leaderboardName, members, options, callback) {
      var member, ranksForMembers, transaction, _i, _len;
      if (options == null) {
        options = {};
      }
      if ((members == null) || members.length === 0) {
        return callback([]);
      }
      ranksForMembers = [];
      transaction = this.redisConnection.multi();
      if (!options['members_only']) {
        for (_i = 0, _len = members.length; _i < _len; _i++) {
          member = members[_i];
          if (this.reverse) {
            transaction.zrank(leaderboardName, member);
          } else {
            transaction.zrevrank(leaderboardName, member);
          }
          transaction.zscore(leaderboardName, member);
        }
      }
      return transaction.exec((function(_this) {
        return function(err, replies) {
          var index, _j, _len1, _results;
          _results = [];
          for (index = _j = 0, _len1 = members.length; _j < _len1; index = ++_j) {
            member = members[index];
            _results.push((function(member) {
              var data;
              data = {};
              data[_this.memberKeyOption] = member;
              if (!options['members_only']) {
                if (replies[index * 2 + 1]) {
                  data[_this.scoreKeyOption] = parseFloat(replies[index * 2 + 1]);
                } else {
                  data[_this.scoreKeyOption] = null;
                  data[_this.rankKeyOption] = null;
                }
              }
              if (options['with_member_data']) {
                return _this.memberDataForIn(leaderboardName, member, function(memberdata) {
                  data[_this.memberDataKeyOption] = memberdata;
                  if (_this.reverse) {
                    return _this.redisConnection.zcount(leaderboardName, '-inf', "(" + data[_this.scoreKeyOption], function(err, count) {
                      data[_this.rankKeyOption] = count + 1;
                      ranksForMembers.push(data);
                      if (ranksForMembers.length === members.length) {
                        switch (options['sort_by']) {
                          case 'rank':
                            ranksForMembers.sort(function(a, b) {
                              return a.rank > b.rank;
                            });
                            break;
                          case 'score':
                            ranksForMembers.sort(function(a, b) {
                              return a.score > b.score;
                            });
                        }
                        return callback(ranksForMembers);
                      }
                    });
                  } else {
                    return _this.redisConnection.zcount(leaderboardName, "(" + data[_this.scoreKeyOption], '+inf', function(err, count) {
                      data[_this.rankKeyOption] = count + 1;
                      ranksForMembers.push(data);
                      if (ranksForMembers.length === members.length) {
                        switch (options['sort_by']) {
                          case 'rank':
                            ranksForMembers.sort(function(a, b) {
                              return a.rank > b.rank;
                            });
                            break;
                          case 'score':
                            ranksForMembers.sort(function(a, b) {
                              return a.score > b.score;
                            });
                        }
                        return callback(ranksForMembers);
                      }
                    });
                  }
                });
              } else {
                if (_this.reverse) {
                  return _this.redisConnection.zcount(leaderboardName, '-inf', "(" + data[_this.scoreKeyOption], function(err, count) {
                    data[_this.rankKeyOption] = count + 1;
                    ranksForMembers.push(data);
                    if (ranksForMembers.length === members.length) {
                      switch (options['sort_by']) {
                        case 'rank':
                          ranksForMembers.sort(function(a, b) {
                            return a.rank > b.rank;
                          });
                          break;
                        case 'score':
                          ranksForMembers.sort(function(a, b) {
                            return a.score > b.score;
                          });
                      }
                      return callback(ranksForMembers);
                    }
                  });
                } else {
                  return _this.redisConnection.zcount(leaderboardName, "(" + data[_this.scoreKeyOption], '+inf', function(err, count) {
                    data[_this.rankKeyOption] = count + 1;
                    ranksForMembers.push(data);
                    if (ranksForMembers.length === members.length) {
                      switch (options['sort_by']) {
                        case 'rank':
                          ranksForMembers.sort(function(a, b) {
                            return a.rank > b.rank;
                          });
                          break;
                        case 'score':
                          ranksForMembers.sort(function(a, b) {
                            return a.score > b.score;
                          });
                      }
                      return callback(ranksForMembers);
                    }
                  });
                }
              }
            })(member));
          }
          return _results;
        };
      })(this));
    };

    return CompetitionRankingLeaderboard;

  })(Leaderboard);

  module.exports = CompetitionRankingLeaderboard;

}).call(this);
